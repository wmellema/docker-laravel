#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([repo],[r],[optional argument, specify a custom repository],[git@github.com/laravel/laravel])
# ARG_OPTIONAL_BOOLEAN([portainer],[p],[boolean optional argument, install portainer])
# ARG_OPTIONAL_BOOLEAN([only-portainer],[P],[boolean optional argument, install only portainer])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.5.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='rpPh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_repo="git@github.com:laravel/laravel"
_arg_portainer=off
_arg_only_portainer=off

print_help ()
{
	printf "%s\n" "The general script's help msg"
	printf 'Usage: %s [-r|--repo <arg>] [-p|--(no-)portainer] [-P|--(no-)only-portainer] [-h|--help]\n' "$0"
	printf "\t%s\n" "-r,--repo: optional argument, specify a custom repository (default: '"git@github.com/laravel/laravel"')"
	printf "\t%s\n" "-p,--portainer,--no-portainer: boolean optional argument, install portainer (off by default)"
	printf "\t%s\n" "-P,--only-portainer,--no-only-portainer: boolean optional argument, install only portainer (off by default)"
	printf "\t%s\n" "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-r|--repo)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_repo="$2"
				shift
				;;
			--repo=*)
				_arg_repo="${_key##--repo=}"
				;;
			-r*)
				_arg_repo="${_key##-r}"
				;;
			-p|--no-portainer|--portainer)
				_arg_portainer="on"
				test "${1:0:5}" = "--no-" && _arg_portainer="off"
				;;
			-p*)
				_arg_portainer="on"
				_next="${_key##-p}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-P|--no-only-portainer|--only-portainer)
				_arg_only_portainer="on"
				test "${1:0:5}" = "--no-" && _arg_only_portainer="off"
				;;
			-P*)
				_arg_only_portainer="on"
				_next="${_key##-P}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-P" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

root=$(pwd);

system=$(./version.sh)
if [ "$_arg_portainer" = on ];
then
    echo Creating Portainer
    docker volume create portainer_data
    docker run --restart=always -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
elif [ "$_arg_only_portainer" = on ];
then
  echo Installing only portainer
  docker volume create portainer_data
  docker run --restart=always -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
  exit 0
else
    echo Not installing Portainer
fi

echo Cloning $_arg_repo
git clone $_arg_repo laravel;
wait;
cd "laravel";
wait;
sed 's/DB_DATABASE=homestead/DB_DATABASE=default/g' .env.example > .envtmp1;
wait;
sed 's/DB_USERNAME=homestead/DB_USERNAME=default/g' .envtmp1 > .envtmp2;
wait;
git clone https://github.com/Laradock/laradock.git;
wait;
git pull;
wait;
cd "laradock";
wait;
sed -i 's/nginx:alpine/nginx:stable-alpine/g' nginx/Dockerfile
wait;
cp env-example .env;
wait;
pwd;
wait;
docker-compose up -d nginx mysql;
wait;
if [ $system = "Darwin" ];
 then
  mysql_host=$(cd "$root/laravel/laradock"; docker-compose exec mysql ip -4 addr show eth0 | awk '/inet /{print substr($2,0,length($2)-3)}')
else
  mysql_host=$(cd "$root/laravel/laradock"; docker-compose exec mysql ip -4 addr show eth0 | awk '/inet /{print substr($2,0,length($2)-3)}')
fi
wait
cd "$root/laravel"
cat .envtmp2 | sed 's/DB_HOST=127.0.0.1/DB_HOST='$mysql_host'/g' > .env
wait
rm -f .envtmp*;
wait;
cd "$root/laravel/laradock";
wait
docker-compose exec workspace composer install
wait
cd "$root/laravel/laradock";
wait
docker-compose exec workspace php artisan key:generate
wait
